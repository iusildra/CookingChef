@startuml loggingOutSequenceDiagram
skinparam responseMessageBelowArrow true

actor User
participant Navbar
participant NavbarController

activate User

User -> Navbar++: clickOnLogout()
Navbar -> NavbarController++: onClickButtonLogout()
NavbarController -> NavbarController: logout()
NavbarController -> Navbar--: loggedOut()
Navbar --> User--: display(loginWindow)
@enduml

@startuml registerSequenceDiagram
skinparam responseMessageBelowArrow true

actor User
participant RegisterPage
participant RegisterController
participant UserFacade
participant AbstractFactory
participant UserDAO
participant DataBase

activate User

User -> RegisterPage++: enterMandatoryFields()
User -> RegisterPage: enterOptionalFields()
User -> RegisterPage: clickOnRegister
RegisterPage -> RegisterController++: onClickButtonRegister()
RegisterController -> RegisterController: checkFields()
alt fields' value are correct and mandatory fields are filled in
  RegisterController -> UserFacade++: Register():User|Null
  UserFacade -> AbstractFactory++: getUserDAO():UserDAO
  UserFacade -> UserDAO++: getUserbyIDPwd():User|Null

  alt User is not null
      RegisterController --> RegisterPage: connectionSucessful()
      RegisterPage --> User--: display(homeWindow)
  else User is Null
      RegisterController -> RegisterPage: connectionFailed()
      RegisterPage --> User--: display(invalid)
  end
else some preconditions are not met
  RegisterController -> RegisterPage: invalidFields()
  RegisterPage --> User--: display(invalid)
end
@enduml

@startuml changeInformationSequenceDiagram
skinparam responseMessageBelowArrow true

actor User
participant Navbar
participant NavbarController
participant UserFacade
participant AbstractFactory
participant UserDAO

=== Change information ==
activate User

User -> Navbar++: clickOnChangeInformation()
Navbar -> Navbar: displayPopup()
User -> Navbar: enterNewInformation()
User -> Navbar: clickOnValidate()
Navbar -> NavbarController++: onClickButtonValidate()
NavbarController -> UserFacade++: changeInformation():User|Null
UserFacade -> AbstractFactory++: getUserDAO():UserDAO
return userDAO
UserFacade -> UserDAO++: changeInformation():User|Null
return user
deactivate UserFacade
alt user is not null

  NavbarController -> Navbar: changeInformationSuccessful()
  Navbar --> User: display(homeWindow)
else user is null
  NavbarController -> Navbar--: changeInformationFailed()
  Navbar --> User--: display(invalid)
end

=== Delete account ==

User -> Navbar++: clickOnDeleteAccount()
Navbar -> Navbar: displayPopup()
User -> Navbar: clickOnConfirm()
Navbar -> NavbarController++: onClickButtonConfirm()
NavbarController -> UserFacade++: askForDeletion()
UserFacade -> AbstractFactory++: getUserDAO():UserDAO
return userDAO
UserFacade -> UserDAO++: askForDeletion()
return
return
return
return displayRequestSent()
@enduml

@startuml accountDeletionSequenceDiagram
skinparam responseMessageBelowArrow true

actor Admin
participant AdminPage
participant AdminPageController
participant AdminFacade
participant AbstractFactory
participant AdminDAO

activate Admin

Admin -> AdminPage++: clickOnManageUsers()
AdminPage -> AdminPageController++: onClickButtonManageUsers()
AdminPageController -> AdminFacade++: getUsers():List<User>
AdminFacade -> AbstractFactory++: getAdminDAO()
return AdminDAO
AdminFacade -> AdminDAO++: getUsers():List<User>
return userList
return userList
AdminPageController -> AdminPage--: displayUsers()
AdminPage --> Admin--: display(users)
Admin -> AdminPage++: clickOnUserDeletion()
AdminPage -> AdminPageController++: onClickButtonUserDeletion()
AdminPageController -> AdminFacade++: deleteUser():boolean
AdminFacade -> AbstractFactory++: getAdminDAO()
return AdminDAO
AdminFacade -> AdminDAO++: deleteUser():boolean
return accountDeleted
alt accountDeleted is true
  AdminPageController -> AdminPage: deleteUserSuccessful()
  AdminPage --> Admin: display(users)
else accountDeleted is false
  AdminPageController -> AdminPage--: deleteUserFailed()
  AdminPage --> Admin--: display(users)
end
@enduml

@startuml userClassDiagram
hide empty members

rectangle GUI {
  class RegisterPage
  class Navbar
  class AdminPage

  RegisterPage -[hidden]d- Navbar
  Navbar -[hidden]d- AdminPage
}

rectangle Controller {
  class RegisterController
  class NavbarController
  class AdminController

  RegisterController -[hidden]d- NavbarController
  NavbarController -[hidden]d- AdminController
}

rectangle DAO {
  interface AbstractUserDAO
  interface AbstractAdminDAO
  AbstractAdminDAO -|> AbstractUserDAO

  class UserDAO
  class AdminDAO

  UserDAO ..|> AbstractUserDAO
  AdminDAO ..|> AbstractAdminDAO
}

interface AbstractFactory
class UserFactory

class UserFacade
class AdminFacade

AdminFacade -d-|> UserFacade
UserFactory .u.|> AbstractFactory

GUI         "1" ->  "1" Controller: controlled by
Controller  "1" --> "1" UserFacade: > uses
UserFacade  "1" -r-> "1" AbstractFactory
UserFactory "1" --> "1" UserDAO: > creates
UserFactory "1" --> "1" AdminDAO: > creates

UserFacade  "1" --> "1" UserDAO: > uses
AdminFacade "1" --> "1" AdminDAO: > uses
@enduml
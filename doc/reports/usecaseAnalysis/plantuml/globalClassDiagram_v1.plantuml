@startuml classDiagram_v1
interface CRUDEntity {
  + toSQLCreateString() : String
  + toSQLUpdateString() : String
  + toSQLDeleteString() : String
}

interface Proxy<T> {
  + get(id: UUID): T
  + get(from: Int, to: Int): T[]
  + getAll(): T[]
  + filter(predicate: Boolean): T[]
}

class DatabaseUtility {
  - {static} connectionPool : ???
  + getDatabaseConnectionPool() : ???
  + closeDatabaseConnectionPool() : void
  + createEntity(e: CRUDEntity) : void
  + updateEntity(e: CRUDEntity) : void
  + deleteEntity(e: CRUDEntity) : void
}

class Utilities {
  + paginate(page: Int, pageSize: Int): Pair<Int, Int>
}

class Recipe {
  - id: UUID
  - name: String
  - description: String
  - /allergen: Boolean
  - picture: Image
  + Recipe(...)
  + getters()
  + setters()
}

class RecipeProxy {
  + Recipes()
}

class FavoriteList {
  - id: UUID
  - name: String
  + FavoriteList(...)
  + getters()
  + setters()
}

abstract CategoryProxy {
  + Categories()
  + {abstract} get(id: UUID): Category
  + {abstract} getAll(): Category[]
  + filter(predicate: Boolean): Category[]
}

class IngredientCategoryProxy {
  + get(id: UUID): IngredientCategory
  + getAll(): IngredientCategory[]
}
class RecipeCategoryProxy {
  + get(id: UUID): RecipeCategory
  + getAll(): RecipeCategory[]
}

class Category {
  - label: String
  - description: Optional<String>
  + Category()
  + getters()
  + setters()
}


class IngredientProxy {
  + Ingredients()
}
class Ingredient {
  - id: UUID
  - name: String
  - allergen: Boolean
  + Ingredient(...)
  + getters()
  + setters()
}

class WineProxy {
  + Wines()
}

class Wine {
  - id: UUID
  - name: String
  - domain: String
  - description: String
  - picture: Image
  - price: Double
  - quantity: Integer
  + Wine(...)
  + getters()
  + setters()
}

class CommentProxy {
  + Comments()
}
class Comment {
  - id: UUID
  - rating: Integer
  - comment: Optional<String>
  - date: Date
  + Comment(...)
  + getters()
  + setters()
}

FavoriteList --|> RecipeProxy

IngredientCategoryProxy -u-|> CategoryProxy
RecipeCategoryProxy     -u-|> CategoryProxy

CategoryProxy    "1" o--> "*" Category: > stores
IngredientProxy  "1" o--> "*" Ingredient: > stores
CommentProxy     "1" o--> "*" Comment: > stores
RecipeProxy      "1" o-r-> "*" Recipe: > stores
WineProxy        "1" o-r-> "*" Wine: > stores

' RecipeProxy -[hidden]u- DatabaseUtility

Recipe      "0..1" --> "1" IngredientProxy: > contains
Recipe      "0..1" --> "1" CategoryProxy: > is
Recipe      "1"    --> "1" CommentProxy: > commented with
Recipe      "0..1" --> "1" WineProxy: > is good with
Ingredient  "0..1" --> "1" CategoryProxy: > is

Recipe            ..|> CRUDEntity
Ingredient        ..|> CRUDEntity
Category          ..|> CRUDEntity
Comment           ..|> CRUDEntity
Wine              .l.|> CRUDEntity
RecipeProxy       ..|> Proxy
IngredientProxy   ..|> Proxy
CategoryProxy     .u.|> Proxy
CommentProxy      ..|> Proxy
WineProxy         ..|> Proxy

class User {
  - id: UUID
  - username: String
  - email: String
  - name: Optional<String>
  - address: Optional<String>
  - phone: Optional<String>
  - other fields: ...
  + User(...)
  + getters()
  + setters()

}

class Chef {
  - id: UUID
  - username: String
  - name: String
  - address: String
  - email: Optional<String>
  - phone: Optional<String>
  - other fields: ...
  + Chef(...)
  + getters()
  + setters()
  + createRecipe(recipe: Recipe): void
  + updateRecipe(recipe: Recipe): void
  + deleteRecipe(recipe: Recipe): void
}


Chef -u-|> User

Chef "0..1" *-r-> "1" RecipeProxy: > owns
Chef "0..1" *--> "1" IngredientProxy: > has
User "0..1" *--> "*" FavoriteList: > favorite lists
@enduml